
#Phase-2 - with mysql 

## Install MySQL on Ubuntu

apt-get install python-dev libmysqlclient-dev mysql-server mysql-client
pip install MySQL-python
mysql_secure_installation

mysql database	  : anixDb
mysql user 	      : airflowDbUser
mysql user pass	  : Airflow!1PW

CREATE DATABASE anixDb CHARACTER SET utf8 COLLATE utf8_unicode_ci;
CREATE USER 'airflowDbUser'@'localhost' IDENTIFIED BY 'Airflow!1PW';
GRANT ALL PRIVILEGES ON * . * TO 'airflowDbUser'@'localhost';
FLUSH PRIVILEGES;

#password change if needed
ALTER USER 'airflowDbUser'@'localhost' IDENTIFIED BY 'Airflow!1PW';

##other dependencies
pip install airflow[mysql] 

## UPDATE custome config file

# Change the executor to Local Executor and db
executor = LocalExecutor
sql_alchemy_conn = mysql://airflowDbUser:Airflow!1PW@localhost/anixDb


# Restart airflow to test your dags
airflow initdb
airflow webserver
airflow scheduler

#Establish your own connections via the web UI; you can test your DB connections via the Ad Hoc Query

######################################################################

# Start Web Server
nohup airflow webserver $* >> /airflow/logs/webserver.logs &

#for stop
for pid in $(ps -ef | grep -e "ww" -e airflow | awk '{print $2}'); do kill -9 $pid; done

#Start Celery Workers
nohup airflow worker $* >> /airflow/logs/celery.logs &

#Start Scheduler
nohup airflow scheduler >> /airflow/logs/scheduler.logs &

#Navigate to the Airflow UI
http://{HOSTNAME}:8080/admin/

##update mysql info in connection at admin menu

#Start Flower (Optional)
#Flower is a web UI built on top of Celery, to monitor your workers.

nohup airflow flower >> /airflow/logs/flower.logs &

#Navigate to the Flower UI (Optional)
http://{HOSTNAME}:5556/
